
module sequence_detector(
    input wire clk,
    input wire reset,
    input wire in,
    output reg out
);

    // State encoding
    typedef enum reg [1:0] {
        S0, // Initial state
        S1, // State after detecting 1
        S2, // State after detecting 10
        S3  // State after detecting 101
    } state_t;
    
    state_t current_state, next_state;

    // State transition logic
    always @(posedge clk or posedge reset) begin
        if (reset) 
            current_state <= S0;
        else
            current_state <= next_state;
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            S0: if (in) next_state = S1; else next_state = S0;
            S1: if (in) next_state = S1; else next_state = S2;
            S2: if (in) next_state = S3; else next_state = S0;
            S3: if (in) next_state = S1; else next_state = S2;
            default: next_state = S0;
        endcase
    end

    // Output logic
    always @(posedge clk or posedge reset) begin
        if (reset)
            out <= 0;
        else
            out <= (current_state == S3);
    end

endmodule


// test bench

module testbench;

    reg clk, reset, in;
    wire out;

    // Instantiate the FSM
    sequence_detector uut (
        .clk(clk),
        .reset(reset),
        .in(in),
        .out(out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10ns clock period
    end

    // Test sequence
    initial begin
        // Initialize inputs
        reset = 1;
        in = 0;
        #15; // Reset for 15ns
        reset = 0;

        // Apply test vectors
        #10; in = 1;
        #10; in = 0;
        #10; in = 1;
        #10; in = 0;
        #10; in = 1;
        #10; in = 1;
        #10; in = 0;
        #10; in = 1;
        #10; in = 0;
        #10; in = 1;

        // End simulation
        #20;
        $stop;
    end

    // Monitor output
    initial begin
        $monitor("At time %t, input = %b, output = %b", $time, in, out);
    end

endmodule
